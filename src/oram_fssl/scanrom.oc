#include "scanrom.oh"
#include "scanrom.h"
#include "../oaes.oh"
#include "endian.oh"
#include "fss.oh"
#include "fss.h"
#include "floram_util.oh"
#include "../ackutil.h"
#include <obliv.h>
#include <copy.oh>

struct scanrom {
	uint8_t * local_data;
	uint8_t * local_halfkey;
	obliv uint8_t * halfkey_a;
	obliv uint8_t * halfkey_b;
	uint8_t * local_blocktemp;
	obliv uint8_t * blocktemp;
	obliv uint8_t * ivtemp;
	size_t blockmultiple;
	size_t blockcount;
	size_t memblocksize;
};

struct scanwrom {
	uint8_t * local_data;
	uint8_t * local_blocktemp;
	obliv uint8_t * blocktemp;
	size_t blockmultiple;
	size_t blockcount;
	size_t memblocksize;
};



void scanrom_read_with_bitvector(obliv uint8_t * data_output, scanrom * rom, obliv size_t index, bool * bitvector) obliv {
#ifdef ORAM_PROFILE_SCHEDULING
	~obliv() printf("BEGIN ROM READ %lld\n", current_timestamp());
#endif

	~obliv() {
		scanrom_read_with_bitvector_offline(rom->local_blocktemp, rom->local_data, bitvector, rom->memblocksize, rom->blockcount);
		memset(rom->ivtemp, 0, BLOCKSIZE * sizeof(obliv uint8_t));
		ocFromSharedCharN(ocCurrentProto(), rom->blocktemp, rom->local_blocktemp, rom->memblocksize);

#ifndef SCANROM_DISABLE_ENCRYPTION

#ifdef ORAM_PROFILE_SCHEDULING
		printf("BEGIN ROM DECRYPT %lld\n", current_timestamp());
#endif

		for (size_t ii = 0; ii < rom->memblocksize/BLOCKSIZE; ii += 1) {
			be64enc(&rom->ivtemp[BLOCKSIZE - sizeof(size_t)], index*rom->blockmultiple + ii);
			oaes_128_from_expanded_double(&rom->blocktemp[rom->memblocksize + ii*BLOCKSIZE], &rom->blocktemp[2*rom->memblocksize + ii*BLOCKSIZE],
										rom->halfkey_a, rom->halfkey_b, rom->ivtemp, rom->ivtemp);
		}
		
		for (size_t ii = 0; ii < rom->memblocksize; ii ++) {
			rom->blocktemp[ii] ^= rom->blocktemp[rom->memblocksize + ii] ^ rom->blocktemp[2*rom->memblocksize + ii];
		}

#ifdef ORAM_PROFILE_SCHEDULING
		printf("END ROM DECRYPT %lld\n", current_timestamp());
#endif

#endif
	}

	ocCopyN(&ocCopyChar, data_output, rom->blocktemp, rom->memblocksize);

#ifdef ORAM_PROFILE_SCHEDULING
	~obliv() printf("END ROM READ %lld\n", current_timestamp());
#endif
}

/* the following function implements Yuval Ishai's suggested optimization for
   truncating the last ayers of the FSS tree in the case of reading. We assume
   that the blockvector is a factor of BLOCKSIZE smaller than it would be in
   the usual case, and set both parties blockvectors to be equal except for a 
   single bit
   */
void scanrom_read_with_blockvector(obliv uint8_t * data_output, scanrom * rom, obliv size_t index, obliv uint8_t * activeblock_delta, uint8_t * blockvector, bool * bitvector) obliv {
#ifdef ORAM_PROFILE_SCHEDULING
	~obliv() printf("BEGIN ROM READ %lld\n", current_timestamp());
#endif

	~obliv(en) {
		memset(rom->blocktemp, 0, BLOCKSIZE*sizeof(obliv uint8_t));
		obliv size_t index_maj = ((index % (BLOCKSIZE*8)) >> 3);
		obliv size_t index_min = ((index % (BLOCKSIZE*8)) & 0x7);
		for (size_t ii = 0; ii < BLOCKSIZE; ii++) {
			rom->blocktemp[ii] = activeblock_delta[ii];
			for (size_t jj = 0; jj < 8; jj++) {
				obliv if ((ii == index_maj) & (jj == index_min)) ((obliv bool *) &rom->blocktemp[ii])[jj] ^= 1;
			}
		}

		for (size_t ii = 0; ii < BLOCKSIZE/sizeof(uint64_t); ii++) revealOblivLLong(&((uint64_t *)rom->local_blocktemp)[ii], ((obliv uint64_t *)rom->blocktemp)[ii], 2);
		for (size_t ii = 0; ii < BLOCKSIZE/sizeof(uint64_t); ii++) revealOblivLLong(&((uint64_t *)rom->local_blocktemp)[ii], ((obliv uint64_t *)rom->blocktemp)[ii], 1);

		scanrom_read_with_blockvector_offline(rom->local_blocktemp, rom->local_data, bitvector, blockvector, rom->memblocksize, rom->blockcount);
		memset(rom->ivtemp, 0, BLOCKSIZE * sizeof(obliv uint8_t));
		ocFromSharedCharN(ocCurrentProto(), rom->blocktemp, rom->local_blocktemp, rom->memblocksize);

#ifndef SCANROM_DISABLE_ENCRYPTION

#ifdef ORAM_PROFILE_SCHEDULING
		printf("BEGIN ROM DECRYPT %lld\n", current_timestamp());
#endif

		for (size_t ii = 0; ii < rom->memblocksize/BLOCKSIZE; ii += 1) {
			be64enc(&rom->ivtemp[BLOCKSIZE - sizeof(size_t)], index*rom->blockmultiple + ii);
			oaes_128_from_expanded_double(&rom->blocktemp[rom->memblocksize + ii*BLOCKSIZE], &rom->blocktemp[2*rom->memblocksize + ii*BLOCKSIZE],
										rom->halfkey_a, rom->halfkey_b, rom->ivtemp, rom->ivtemp);
		}
		
		for (size_t ii = 0; ii < rom->memblocksize; ii ++) {
			rom->blocktemp[ii] ^= rom->blocktemp[rom->memblocksize + ii] ^ rom->blocktemp[2*rom->memblocksize + ii];
		}

#ifdef ORAM_PROFILE_SCHEDULING
		printf("END ROM DECRYPT %lld\n", current_timestamp());
#endif

#endif
	}

	ocCopyN(&ocCopyChar, data_output, rom->blocktemp, rom->memblocksize);

#ifdef ORAM_PROFILE_SCHEDULING
	~obliv() printf("END ROM READ %lld\n", current_timestamp());
#endif
}

void scanrom_write_xor_shares(scanrom* rom, obliv uint8_t * data, size_t index, size_t len) {
	//receives one share from each party, encrypts them locally, and shares them

	scanrom_encrypt_offline(&rom->local_data[index * rom->memblocksize], data, rom->local_halfkey, index, rom->blockmultiple, MIN(len, rom->blockcount - index));

	for (size_t jj = index; jj < MIN(index + len, rom->blockcount); jj++) {
		for (size_t ii = 0; ii < rom->memblocksize/sizeof(uint64_t); ii++) {
			if (ocCurrentParty() == 1) ((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii] ^= ocBroadcastLLong(NULL, 2);
			else ocBroadcastLLong(((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii], 2);
		}
	}

	for (size_t jj = index; jj < MIN(index + len, rom->blockcount); jj++) {
		for (size_t ii = 0; ii < rom->memblocksize/sizeof(uint64_t); ii++) {
			if (ocCurrentParty() == 2 ) ((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii] = ocBroadcastLLong(NULL, 1);
			else ocBroadcastLLong(((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii], 1);
		}
	}
}

void scanrom_set_key(scanrom* rom, uint8_t* key_local) {
	memcpy(rom->local_halfkey, key_local, KEYSIZE);
	feedOblivCharArray(rom->halfkey_a, rom->local_halfkey, KEYSIZE, 1);
	feedOblivCharArray(rom->halfkey_b, rom->local_halfkey, KEYSIZE, 2);
	oaes_128_expandkey(rom->halfkey_a);
	oaes_128_expandkey(rom->halfkey_b);
}

void scanrom_import_from_scanwrom(scanrom * rom, scanwrom * wrom) {
	scanrom_write_xor_shares(rom, wrom->local_data, 0, rom->blockcount);
}

void scanrom_import_from_scanwrom_range(scanrom * rom, scanwrom * wrom, size_t index, size_t len) {
	scanrom_write_xor_shares(rom, &wrom->local_data[index * wrom->memblocksize], index, len);
}

void scanrom_clear(scanrom* rom) {
	//receives one share from each party, encrypts them locally, and shares them

	scanrom_encrypt_offline(rom->local_data, NULL, rom->local_halfkey, 0, rom->blockmultiple, rom->blockcount);

	for (size_t jj = 0; jj < rom->blockcount; jj++) {
		for (size_t ii = 0; ii < rom->memblocksize/sizeof(uint64_t); ii++) {
			if (ocCurrentParty() == 1) ((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii] ^= ocBroadcastLLong(NULL, 2);
			else ocBroadcastLLong(((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii], 2);
		}
	}

	for (size_t jj = 0; jj < rom->blockcount; jj++) {
		for (size_t ii = 0; ii < rom->memblocksize/sizeof(uint64_t); ii++) {
			if (ocCurrentParty() == 2 ) ((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii] = ocBroadcastLLong(NULL, 1);
			else ocBroadcastLLong(((uint64_t *)(&rom->local_data[jj * rom->memblocksize]))[ii], 1);
		}
	}
}

scanrom* scanrom_new(size_t memblocksize, size_t n, void* key_local) {
	scanrom * rom = malloc(sizeof(scanrom));
	rom->memblocksize = memblocksize;
	rom->blockmultiple = memblocksize/BLOCKSIZE;
	rom->blockcount = n;
	floram_zpma(&rom->local_data, 16, n * memblocksize);
	rom->local_halfkey = malloc(KEYSIZE);
	floram_pma(&rom->local_blocktemp, 16, memblocksize);
	rom->blocktemp = calloc(3*memblocksize, sizeof(obliv uint8_t));
	rom->ivtemp = calloc(BLOCKSIZE, sizeof(obliv uint8_t));
	//These will double for both the expanded and non-expanded forms
	rom->halfkey_a = calloc(KEYSIZE * 11, sizeof(obliv uint8_t));
	rom->halfkey_b = calloc(KEYSIZE * 11, sizeof(obliv uint8_t));
	scanrom_set_key(rom, key_local);
	return rom;
}

void scanrom_free(scanrom* rom) {
	free(rom->local_data);
	free(rom->local_halfkey);
	free(rom->local_blocktemp);
	free(rom->blocktemp);
	free(rom->ivtemp);
	free(rom->halfkey_a);
	free(rom->halfkey_b);
	free(rom);
}







void scanwrom_read(obliv uint8_t* data, scanwrom* rom, size_t index) {
	ocFromSharedCharN(ocCurrentProto(), data, &rom->local_data[index * (rom->memblocksize)], rom->memblocksize);
}

void scanwrom_write(scanwrom* rom, obliv uint8_t* data, size_t index) {
	ocToSharedCharN(ocCurrentProto(), &rom->local_data[index * (rom->memblocksize)], data, rom->memblocksize);
}

void scanwrom_write_with_blockvector(scanwrom* rom, obliv uint8_t * active_block_delta, uint8_t * blockvector, bool * bitvector, obliv uint8_t * old_data, obliv uint8_t * new_data) obliv {
#ifdef ORAM_PROFILE_SCHEDULING
	~obliv() printf("BEGIN WOM WRITE %lld\n", current_timestamp());
#endif

	~obliv(en) {
		memset(rom->blocktemp, 0, rom->memblocksize*sizeof(obliv uint8_t));
		obliv if (en) {
			for (size_t ii = 0; ii < rom->memblocksize; ii++) {
				rom->blocktemp[ii] = old_data[ii] ^ new_data[ii];
			}
		}

		// Blocktemp now contains the data delta
		for (size_t ii = 0; ii < rom->memblocksize; ii++) {
			rom->blocktemp[ii] ^= active_block_delta[ii];
		}
		for (size_t ii = 0; ii < rom->memblocksize/sizeof(uint64_t); ii++) revealOblivLLong(&((uint64_t *)rom->local_blocktemp)[ii], ((obliv uint64_t *)rom->blocktemp)[ii], 2);
		for (size_t ii = 0; ii < rom->memblocksize/sizeof(uint64_t); ii++) revealOblivLLong(&((uint64_t *)rom->local_blocktemp)[ii], ((obliv uint64_t *)rom->blocktemp)[ii], 1);

		scanwrom_write_with_blockvector_offline(rom->local_data, blockvector, bitvector, rom->local_blocktemp, rom->memblocksize, rom->blockcount);
	}

#ifdef ORAM_PROFILE_SCHEDULING
	~obliv() printf("END WOM WRITE %lld\n", current_timestamp());
#endif
}

void scanwrom_read_xor_shares(uint8_t * data, scanwrom* rom, size_t index, size_t len) {
	memcpy(data, &rom->local_data[index * rom->memblocksize], MIN(len*rom->memblocksize, (rom->blockcount - index)*rom->memblocksize));
}

void scanwrom_write_xor_shares(scanwrom* rom, uint8_t * data, size_t index, size_t len) {
	memcpy(&rom->local_data[index * rom->memblocksize], data, MIN(len*rom->memblocksize, (rom->blockcount - index)*rom->memblocksize));
}

void scanwrom_clear(scanwrom* rom) {
	memset(rom->local_data, 0, rom->blockcount * rom->memblocksize);
}

scanwrom* scanwrom_new(size_t memblocksize, size_t n) {
	online_expand_init();
	scanwrom * rom = malloc(sizeof(scanwrom));
	rom->memblocksize = memblocksize;
	rom->blockmultiple = memblocksize/BLOCKSIZE;
	rom->blockcount = n;
	floram_zpma(&rom->local_data, 16, n * memblocksize);
	floram_pma(&rom->local_blocktemp, 16, memblocksize);
	rom->blocktemp = calloc(3, memblocksize * sizeof(obliv uint8_t));
	return rom;
}

void scanwrom_free(scanwrom* rom) {
	free(rom->local_data);
	free(rom->local_blocktemp);
	free(rom->blocktemp);
	free(rom);
	online_expand_deinit();
}