#include <obliv.oh>
#include "oqueue.oh"
#include <copy.oh>
#include "test_generic.h"

static const char TESTNAME[] = "oqueue_pushpop_benchmark";

#define TEXT_HELP_SUPPLEMENTARY "\
  -e \x1b[4mNUMBER\x1b[0m, --element-count=\x1b[4mNUMBER\x1b[0m \n\t\tuse queues of \x1b[4mNUMBER\x1b[0m elements\n\n\
  -s \x1b[4mNUMBER\x1b[0m, --element-size=\x1b[4mNUMBER\x1b[0m \n\t\tuse queuess with elements containing \x1b[4mNUMBER\x1b[0m 32-bit words\n\n\
  -i \x1b[4mNUMBER\x1b[0m, --samples=\x1b[4mNUMBER\x1b[0m \n\t\trun \x1b[4mNUMBER\x1b[0m iterations of the benchmark\n\n"

static const char options_string[] = "e:s:o:i:";
static struct option long_options[] = {
	{"element-count", required_argument, NULL, 'e'},
	{"element-size", required_argument, NULL, 's'},
	{"oram-type", required_argument, NULL, 'o'},
	{"samples", required_argument, NULL, 'i'},
	{0, 0, 0, 0}
};

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

void test_main(void*varg) {

	#ifdef ORAM_OVERRIDE
	oram_set_default_type(ORAM_OVERRIDE);
	#endif

	size_t elct = 4;
	size_t elsz = 1;
	int samples = 1;

	args_t * args_pass = varg;
	int arg;
	optind = 0; // this allows us to getopt a second time
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'e') {
			elct = atoll(optarg);
			if (elct <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == 's') {
			elsz = atoll(optarg);
			if (elsz <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == 'i') {
			samples = atoi(optarg);
			if (samples <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'e' || optopt == 's' || optopt == 'o' || optopt == 'i') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	fprintf(stdout, "# QUEUE PUSHPOP (element count, element size, sample 1 microseconds, sample 1 gates, sample 1 bytes, ...)\n");

	OcCopy cpy = ocCopyIntN(elsz);

	uint64_t tally1 = 0;
	uint64_t tallygates1 = 0;
	uint64_t tallybytes1 = 0;
	uint64_t tally2 = 0;
	uint64_t tallygates2 = 0;
	uint64_t tallybytes2 = 0;
	obliv uint32_t * val = calloc(1, elsz * sizeof(obliv uint32_t));

	oqueue * testQueue = oqueue_new_static(&cpy, elct);

	for (int ii = 0; ii <samples; ii ++) {
		for (int jj = 0; jj < elsz; jj++) val[jj] = feedOblivInt(rand(), 1);
		obliv bool real1 = feedOblivBool(rand()&1, 1);
		obliv bool real2 = feedOblivBool(rand()&1, 1);
		int64_t runtime1 = -current_timestamp();
		int64_t rungates1 = -yaoGateCount();
		int64_t runbytes1 = -tls2PBytesSent(ocCurrentProto());
		obliv if (real1) oqueue_push(testQueue, val);
		runtime1 += current_timestamp();
		rungates1 += yaoGateCount();
		runbytes1 += tls2PBytesSent(ocCurrentProto());
		int64_t runtime2 = -current_timestamp();
		int64_t rungates2 = -yaoGateCount();
		int64_t runbytes2 = -tls2PBytesSent(ocCurrentProto());
		obliv if (real2) oqueue_pop(val, testQueue);
		runtime2 += current_timestamp();
		rungates2 += yaoGateCount();
		runbytes2 += tls2PBytesSent(ocCurrentProto());
		fprintf(stdout, ",%llu,%llu,%llu,%llu,%llu,%llu", runtime1,rungates1, runbytes1,runtime2,rungates2, runbytes2);
		fflush(stdout);
		tally1 += runtime1;
		tallygates1 += rungates1;
		tallybytes1 += runbytes1;
		tally2 += runtime2;
		tallygates2 += rungates2;
		tallybytes2 += runbytes2;
	}

	oqueue_free(testQueue);
	fprintf(stdout, "\n");
	fprintf(stderr, "Queue push (count:%lld, size: %lld): %llu microseconds avg, %llu gates avg, %llu bytes avg\n", elct, elsz, tally1 / samples, tallygates1/samples, tallybytes1/samples);
	fprintf(stderr, "Queue pop  (count:%lld, size: %lld): %llu microseconds avg, %llu gates avg, %llu bytes avg\n", elct, elsz, tally2 / samples, tallygates2/samples, tallybytes2/samples);

}
